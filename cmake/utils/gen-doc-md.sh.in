#!/usr/bin/env bash
# Copyright (c) 2020-2021 The Bitcoin developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

export LC_ALL=C
set -e

cd "@CMAKE_CURRENT_BINARY_DIR@"
rm -f mkdocs.yml
rm -rf md
mkdir md
cd "@CMAKE_SOURCE_DIR@"
find . \( \
  -name '*.md' \
  -a -not -path './*/*.md' \
  -o -path './contrib/*.md' \
  -o -path './depends/*.md' \
  -o -path './share/*.md' \
  -o -path './src/*.md' \
  -o -path './test/*.md' \
  -o -path './doc/*.md' \
  -o -path './doc/*.png' \
  -o -path './doc/*.svg' \
  -o -path './doc/*.css' \) \
  -a -not -path './doc/html/*' \
  -print0 \
  | tar cf - --null -T - \
  | tar xf - --directory "@CMAKE_CURRENT_BINARY_DIR@/md"
cd "@CMAKE_CURRENT_BINARY_DIR@"

# Create Markdown version of license.
first=1
while IFS= read -r line; do
  if [ $first == 1 ]; then
    echo "# $line" > md/COPYING.md
    first=0
  else
    echo "    $line" >> md/COPYING.md
  fi
done < "@CMAKE_SOURCE_DIR@/COPYING"
sed -i s/\]\(COPYING\)/\]\(COPYING.md\)/ md/README.md

# Generate command-line interface documentation.
mkdir -p md/doc/cli
"@CMAKE_SOURCE_DIR@/contrib/devtools/cli-help-to-markdown.py" "$(../src/radiantd -??)" > md/doc/cli/radiantd.md
if [ "@CMAKE_SYSTEM_NAME@" == "Darwin" ]; then
  "@CMAKE_SOURCE_DIR@/contrib/devtools/cli-help-to-markdown.py" "$("../src/qt/@BITCOIN_QT_OSX_BUNDLE_NAME@.app/Contents/MacOS/@BITCOIN_QT_OSX_BUNDLE_NAME@" -??)" > md/doc/cli/bitcoin-qt.md
else
  "@CMAKE_SOURCE_DIR@/contrib/devtools/cli-help-to-markdown.py" "$(../src/qt/bitcoin-qt -??)" > md/doc/cli/bitcoin-qt.md
fi
"@CMAKE_SOURCE_DIR@/contrib/devtools/cli-help-to-markdown.py" "$(../src/radiant-cli -?)" > md/doc/cli/radiant-cli.md
"@CMAKE_SOURCE_DIR@/contrib/devtools/cli-help-to-markdown.py" "$(../src/radiant-tx -?)" > md/doc/cli/radiant-tx.md
"@CMAKE_SOURCE_DIR@/contrib/devtools/cli-help-to-markdown.py" "$(../src/seeder/radiant-seeder -?)" > md/doc/cli/radiant-seeder.md

# Start a regtest node in a temporary data directory.
mkdir -p md/doc/json-rpc/tmp
../src/radiantd -daemon -debuglogfile=0 -regtest -datadir="@CMAKE_CURRENT_BINARY_DIR@/md/doc/json-rpc/tmp" -rpcuser=gen-manpages -rpcpassword=gen-manpages
# Get daemon version which will be included in footer.
version="$(../src/radiantd -version | head -n1)"
# Iterate over the existing mkdocs file and locate the entry for json-rpc/README.md.
while IFS= read -r line; do
  # Copy existing mkdocs entries into the new mkdocs file.
  # Remove draft release notes from menu for online publication.
  if [ "@DOC_ONLINE@" == "OFF" ] || [ "${line: -21}" != " doc/release-notes.md" ]; then
    echo "$line" >> mkdocs.yml
  fi
  # Find the json-rpc/README.md entry.
  if [ "${line: -23}" == " doc/json-rpc/README.md" ]; then
    indentation="${line%%-*}"
    # The list of RPC commands will be inserted into the new mkdocs file below the readme entry.
    # Get the list of RPC commands from the node and process it.
    {
        echo "Radiant Node JSON-RPC commands"
        echo "==================================="
    } > md/doc/json-rpc/README.md
    ../src/radiant-cli -rpcwait -regtest -datadir="@CMAKE_CURRENT_BINARY_DIR@/md/doc/json-rpc/tmp" -rpcuser=gen-manpages -rpcpassword=gen-manpages help | while read -r helpline; do
      if [ -n "$helpline" ]; then
        if [[ "$helpline" =~ ^==[[:space:]](.*)[[:space:]]==$ ]]; then
          # Found a category.
          category="${BASH_REMATCH[1]}"
          # Write category to new mkdocs file.
          echo "$indentation- $category:" >> mkdocs.yml
          # Write category to readme file.
          {
              echo
              echo "## $category"
              echo
          } >> md/doc/json-rpc/README.md
        else
          # Found a command.
          command=${helpline%% *}
          # Write command to new mkdocs file.
          echo "$indentation    - $command: doc/json-rpc/$command.md" >> mkdocs.yml
          # Create command help page.
          "@CMAKE_SOURCE_DIR@/contrib/devtools/rpc-help-to-markdown.py" "$(../src/radiant-cli -rpcwait -regtest -datadir="@CMAKE_CURRENT_BINARY_DIR@/md/doc/json-rpc/tmp" -rpcuser=gen-manpages -rpcpassword=gen-manpages help $command)" > "md/doc/json-rpc/$command.md"
          {
              echo
              echo "***"
              echo
              echo "*$version*"
          } >> "md/doc/json-rpc/$command.md"
          # Write command to readme file.
          if [ "$command" == "$helpline" ]; then
            echo "* [**\`$command\`**]($command.md)" >> md/doc/json-rpc/README.md
          else
            echo "* [**\`$command\`**\` ${helpline:${#command}}\`]($command.md)" >> md/doc/json-rpc/README.md
          fi
        fi
      fi
    done
    {
        echo
        echo "***"
        echo
        echo "*$version*"
    } >> md/doc/json-rpc/README.md
  fi
done < "@CMAKE_CURRENT_SOURCE_DIR@/mkdocs.yml.in"
# Stop the regtest node.
../src/radiant-cli -rpcwait -regtest -datadir="@CMAKE_CURRENT_BINARY_DIR@/md/doc/json-rpc/tmp" -rpcuser=gen-manpages -rpcpassword=gen-manpages stop
# Remove the temporary node data directory.
rm -r md/doc/json-rpc/tmp

if [ "@DOC_ONLINE@" == "OFF" ]; then
  # Directory URLs do not work when browsing local HTML files, so disable them.
  echo "use_directory_urls: false" >> mkdocs.yml
  # Search plug-in does not work when browsing local HTML files (due to same-origin policy), so disable it.
  echo "plugins: []" >> mkdocs.yml
else
  # Delete next release draft release notes for online publication.
  rm md/doc/release-notes.md
  # Append warning about possible API changes in master branch.
  file_list=(md/doc/cli/*.md)
  for md in "${file_list[@]}"; do
    {
        echo ""
        echo "***"
    } >> "$md"
  done
  file_list=(md/doc/cli/*.md md/doc/json-rpc/*.md)
  for md in "${file_list[@]}"; do
    {
        echo ""
        echo "<small>Documentation on docs.radiantblockchain.org reflects the current master branch in Git, and may include API changes that are not yet present in the latest release.</small>"
    } >> "$md"
  done
fi

